import "./App.css";
import React from "react";
import {
  TextField,
  Button,
  Slider,
  FormLabel,
  Grid,
  Checkbox,
} from "@material-ui/core";
import FileCopyIcon from "@material-ui/icons/FileCopy";
import { PasswordGenerator } from "./components/passwordGenerator/passwordGenerator";
import { CsvDataService } from "./components/csvDownloader";

export default class App extends React.Component {
  state = {
    options: {
      length: 10,
      upper: true,
      lower: true,
      digits: false,
      special: false,
      amount: 1,
    },
    password: "",
  };

  // copy currently generated passwords to user clipboard
  copyPasswordToClipBoard = () => {
    navigator.clipboard.writeText(this.state.password);
  };

  // calls the functionality of the CsvDataService Class to save the currently generated passwords in a csv and download them
  savePasswordToCSV = () => {
    const saver = CsvDataService.exportToCsv(
      "passwords.csv",
      this.state.password
    );
    return saver;
  };

  // handler to update the state values depending on which radio input was changed
  handleOptionsBoolChange = (e) => {
    const { name } = e.target;
    const options = {
      ...this.state.options,
    };
    // set the Option with the name of the CheckBox equal to the checked Status
    options[name] = e.target.checked;
    console.log(options);
    this.setState({ options });
  };

  // update the state.options.length dependend on the slider
  handlerUpdateLength = (value) => {
    const options = {
      ...this.state.options,
    };
    // set the password length in the state options equal to the slider val
    options.length = Number(value);
    this.setState({ options });
  };

  // update the state.options.amount dependend on the slider
  handlerUpdateAmount = (value) => {
    const options = {
      ...this.state.options,
    };
    // set the password amount in the state options equal to the slider val
    options.amount = Number(value);
    this.setState({ options });
  };

  // generated new PasswordGenerator Class using the values in the state and generates new passwords
  passwordGeneration = async () => {
    // set these consts equal to their counterpart in the state options
    const { upper, lower, digits, special } = this.state.options;
    // set passwordLength and count equal to their counterpart in the state options
    const passwordLength = this.state.options.length;
    const countPasswords = this.state.options.amount;
    // create new instance of the PasswordGenerator class using the consts from above
    const password = new PasswordGenerator(
      passwordLength,
      upper,
      lower,
      special,
      digits,
      countPasswords
    );
    // var password equals the string array generated by the generatePassword function
    var passwords = await password.generatePassword();
    // setting the value in the state options equal to the string array from above
    this.setState({ password: passwords });
  };

  render() {
    return (
      <div className="PasswordGeneratorApp">
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <div className="GeneralContainer">
          <h1 id="title">Password Generator</h1>
          <br></br>
        </div>
        <div>
          <form className="Form" noValidate autoComplete="off">
            <TextField
              id="outlined-basic"
              variant="outlined"
              style={{ width: "95%", left: "1%" }}
              value={this.state.password}
            />
            <FileCopyIcon
              id="copyPasswords"
              style={{
                position: "relative",
                right: 35,
                top: -13,
                width: 30,
                height: 80,
              }}
              onClick={this.copyPasswordToClipBoard}
            />
            <br></br>
            <br></br>
          </form>
          <Grid className="buttonGrid">
            <Button
              className="gridButton"
              id="passwordGenerateButton"
              onClick={() => {
                this.passwordGeneration();
              }}
              variant="contained"
            >
              Generate New Password
            </Button>
            <Button
              className="gridButton"
              id="buttonSaveCSV"
              onClick={this.savePasswordToCSV}
              variant="contained"
              style={{
                backgroundColor: "lightGrey",
                flexDirection: "row",
                flex: 5,
              }}
            >
              Save your Passwords to a CSV File
            </Button>
          </Grid>
        </div>
        <div>
          <br></br>
          <FormLabel
            className="label"
            id="lblPasswordLength"
            style={{ color: "#FAFAFA", padding: "1%" }}
          >
            Choose your Password Length: {this.state.options.length}
          </FormLabel>
          <br></br>
          <Slider
            style={{ maxWidth: "95%" }}
            className="sliderPasswordLength"
            value={this.state.options.length}
            min={1}
            max={128}
            step={2}
            onChange={(e, val) => this.handlerUpdateLength(val)}
            valueLabelDisplay="auto"
          />
          <br></br>
        </div>
        <div>
          <br></br>
          <FormLabel
            className="label"
            id="lblPasswordCount"
            style={{ color: "#FAFAFA", padding: "1%" }}
          >
            Choose how many passwords you need: {this.state.options.amount}
          </FormLabel>
          <br></br>
          <Slider
            style={{ maxWidth: "95%" }}
            className="sliderPasswordAmount"
            value={this.state.options.amount}
            min={1}
            max={64}
            step={1}
            onChange={(e, val) => this.handlerUpdateAmount(val)}
            valueLabelDisplay="auto"
          />
          <br></br>
          <div className="radioChoose">
            <Checkbox
              value={true}
              name="special"
              onChange={this.handleOptionsBoolChange}
              checked={this.state.options.special}
              style={{ color: "red" }}
            />
            {"Use special characters"}
            <Checkbox
              value={true}
              name="upper"
              onChange={this.handleOptionsBoolChange}
              checked={this.state.options.upper}
              style={{ color: "red" }}
            />
            {"Use upper case letters"}
            <Checkbox
              value={true}
              name="lower"
              onChange={this.handleOptionsBoolChange}
              checked={this.state.options.lower}
              style={{ color: "red" }}
            />
            {"Use lower case letters"}
            <Checkbox
              value={true}
              name="digits"
              onChange={this.handleOptionsBoolChange}
              checked={this.state.options.digits}
              style={{ color: "red" }}
            />
            {"Use digits"}
          </div>
        </div>
      </div>
    );
  }
}
